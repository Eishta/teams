{"version":3,"sources":["components/Users.js","actions/actions.js","actions/actionTypes.js","components/NavBar.js","container/App.js","serviceWorker.js","reducers/userReducer.js","store/createStore.js","index.js"],"names":["Users","state","name","desc","onChangeName","e","setState","target","value","onChangeDesc","createUserHandler","props","createUser","match","params","deleteUserHandler","deleteUser","renderElement","this","users","map","user","index","className","style","display","readOnly","marginTop","onClick","width","height","padding","margin","marginBottom","aria-hidden","onChange","Component","connect","ownProps","console","log","dispatch","team","type","userName","NavBar","collapsed","teamName","toggleNavbar","submitTeam","createTeam","teams","classOne","classTwo","id","data-toggle","data-target","aria-controls","aria-expanded","aria-label","key","to","React","App","Fragment","path","exact","component","Boolean","window","location","hostname","initialState","userReducer","action","find","ele","concat","filter","store","createStore","applyMiddleware","logger","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.17a89baf.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {connect } from 'react-redux';\r\nimport '../styles/styles.css'\r\nimport { createUser,deleteUser } from '../actions/actions'\r\nclass Users extends Component {\r\n    state = {\r\n        name: '',\r\n        desc: ''\r\n    }\r\n    onChangeName=(e)=> {\r\n        this.setState({name: e.target.value})\r\n    }\r\n    onChangeDesc=(e)=> {\r\n        this.setState({desc: e.target.value})\r\n    }\r\n    createUserHandler=()=> {\r\n        this.props.createUser(this.props.match.params.name, this.state.name, this.state.desc);\r\n        this.setState({\r\n            name: '',\r\n            desc:''\r\n        })\r\n    }\r\n    deleteUserHandler=(name)=> {\r\n        this.props.deleteUser(this.props.match.params.name, name)\r\n    }\r\n    render() {\r\n\r\n        let renderElement = this.props.users?  this.props.users.map((user, index) =>\r\n                   <div className=\"col-sm-4\">\r\n                    <div className=\"card text-white bg-primary mb-3\">\r\n                        <div className=\"card-body\" style={{ display: 'grid' }}>\r\n                            <span style={{ display: 'grid' }}> <label>Name</label>\r\n                                <input value={user.name} readOnly/></span>\r\n                            <span style={{ display: 'grid' }}><label>Desc</label>\r\n                                <textarea value={user.desc} readOnly></textarea></span>\r\n                            <button style={{ marginTop: '2rem' }} onClick={()=>this.deleteUserHandler(user.name)}>Delete</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        \r\n        ): null;\r\n \r\n        return (\r\n            <div className=\"container\" style={{ width: \"80%\", height: \"50%\", padding: \"10px\", margin: \"auto\" }}>\r\n                <div className=\"card \" style={{ marginBottom: \"10px\" }}>\r\n                    <div className=\"card-body\">\r\n        <h3 >{this.props.match.params.name}</h3>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                    <div className=\"card text-white bg-primary mb-3\">\r\n                        <div className=\"card-header\"> <i aria-hidden=\"true\">Create</i></div>\r\n                        <div className=\"card-body\" style={{ display: 'grid' }}>\r\n                            <span style={{ display: 'grid' }}> <label>Name</label>\r\n                                <input value={this.state.name} onChange={this.onChangeName}/></span>\r\n                            <span style={{ display: 'grid' }}><label>Desc</label>\r\n                                <textarea value={this.state.desc} onChange={this.onChangeDesc}></textarea></span>\r\n                            <button style={{ marginTop: '2rem' }} onClick={this.createUserHandler}>Create</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                {renderElement}\r\n\r\n            </div>)\r\n    }\r\n}\r\nconst mapStateToProps = (state, ownProps) => {\r\n    console.log(ownProps);\r\n    return {\r\n        users: state.users[ownProps.match.params.name]\r\n\r\n    }\r\n\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        createUser: (team, name, desc) => dispatch(createUser(team, name, desc)),\r\n        deleteUser: (team,name)=> dispatch(deleteUser(team,name))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Users)","import { CREATE_TEAM, CREATE_USER, DELETE_USER } from './actionTypes';\r\n\r\nconst createTeam=(name)=> {\r\n    console.log(name)\r\n    return {\r\n        type: CREATE_TEAM,\r\n        name\r\n    }\r\n}\r\nconst createUser=(team, name,desc)=> {\r\n    return {\r\n        type: CREATE_USER,\r\n        team,name,desc\r\n    }\r\n}\r\nconst deleteUser=(team, userName)=> {\r\n  return {\r\n      type: DELETE_USER,\r\n      team, userName\r\n  }\r\n}\r\n\r\nexport {createTeam, createUser, deleteUser};","export const CREATE_TEAM='CREATE_TEAM';\r\nexport const CREATE_USER='CREATE_USER';\r\nexport const DELETE_USER='DELETE_USER';","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport '../styles/styles.css';\r\nimport { connect } from 'react-redux';\r\nimport { createTeam } from '../actions/actions'\r\n\r\nclass NavBar extends React.Component {\r\n  state = {\r\n    collapsed: true,\r\n    teamName: ''\r\n  };\r\n\r\n  toggleNavbar = () =>\r\n    this.setState({\r\n      collapsed: !this.state.collapsed,\r\n    });\r\n  onChangeName = (e) => {\r\n    this.setState({\r\n      teamName: e.target.value\r\n    })\r\n  }\r\n  submitTeam = () => {\r\n    this.props.createTeam(this.state.teamName);\r\n    this.setState({ teamName: '' })\r\n  }\r\n  render() {\r\n    let teams = [...this.props.teams]\r\n    const collapsed = this.state.collapsed;\r\n    const classOne = collapsed ? 'collapse navbar-collapse' : 'collapse navbar-collapse show';\r\n    const classTwo = collapsed ? 'navbar-toggler navbar-toggler-right collapsed' : 'navbar-toggler navbar-toggler-right';\r\n    return (\r\n      <>\r\n        <div className=\"card text-left bg-secondary text-white\" style={{ marginBottom: \"10px\" }}>\r\n          <div className=\"card-body\">\r\n            <select name=\"type\"><option value=\"Teams\"> Teams</option></select>\r\n            <input value={this.state.teamName} onChange={this.onChangeName} />\r\n            <button onClick={this.submitTeam}>Create</button>\r\n          </div>\r\n        </div>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\" id=\"sideNav\">\r\n          <button onClick={this.toggleNavbar} className={`${classTwo}`} type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\">\r\n            </span>\r\n          </button>\r\n          <div className={`${classOne}`} id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item nav-link js-scroll-trigger\">TEAMS</li>\r\n\r\n              {teams.map((team, index) => <li key={index} className=\"nav-item\">\r\n                <Link className=\"nav-link js-scroll-trigger\" to={`/users/${team.name}`}> {team.name}</Link>\r\n              </li>)}\r\n\r\n            </ul>\r\n          </div>\r\n        </nav>\r\n      </>\r\n    )\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    teams: state.teams\r\n  }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    createTeam: (name) => dispatch(createTeam(name))\r\n  }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(NavBar);","// \r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Redirect, Switch } from \"react-router-dom\"\r\n\r\nimport Users from '../components/Users'\r\nimport NavBar from '../components/NavBar'\r\n\r\nconst App =() =>{\r\n \r\n    return (\r\n    <React.Fragment> \r\n      <Router>\r\n      <NavBar/>\r\n              <Switch> \r\n                <Route path='/users' exact component={Users} />\r\n                <Route path='/users/:name' component={Users} />\r\n                <Redirect to=\"/\" />\r\n              </Switch>\r\n      </Router>\r\n     </React.Fragment>)\r\n  \r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { CREATE_TEAM, CREATE_USER, DELETE_USER } from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    teams: [],\r\n    users: {}\r\n}\r\nconst userReducer = (state = initialState, action) => {\r\n\r\n    switch (action.type) {\r\n        case CREATE_TEAM: {\r\n            return {\r\n                ...state,\r\n                teams: !state.teams.find(ele => ele.name === action.name)\r\n                    ? [...state.teams, { name: action.name }]\r\n                    : [...state.teams],\r\n                users: !state.users[action.name] ?{\r\n                    ...state.users, [action.name]: [] } : {...state.users}\r\n             \r\n            }\r\n        }\r\n        case CREATE_USER: return {\r\n            ...state,\r\n            users: {\r\n                ...state.users,\r\n                [action.team]: !state.users[action.team].find(ele => ele.name === action.name)\r\n                    ? [...state.users[action.team].concat(\r\n                        {\r\n                            name: action.name,\r\n                            desc: action.desc\r\n                        }\r\n                    )\r\n                    ] : [...state.users[action.team]]\r\n            }\r\n        };\r\n        case DELETE_USER: return {\r\n            ...state,\r\n            users: {\r\n                ...state.users,\r\n                [action.team]: [...state.users[action.team].filter(user => {\r\n                    debugger;\r\n                    return user.name !== action.userName\r\n                })]\r\n            }\r\n        }\r\n        default: return state;\r\n    }\r\n}\r\n\r\nexport default userReducer;","import {createStore, applyMiddleware} from 'redux'\r\nimport userReducer from '../reducers/userReducer';\r\nimport logger from 'redux-logger';\r\nimport {reducer} from '../reducers/userReducer'\r\n\r\nexport const store = createStore(userReducer, applyMiddleware(logger));\r\n// import {createStore, applyMiddleware} from 'redux';\r\n// import {rootReducer} from '../reducers/quizReducer';\r\n// import thunkMiddleware from 'redux-thunk';\r\n// import logger  from 'redux-logger';\r\n\r\n// export const store = createStore(rootReducer, applyMiddleware(logger, thunkMiddleware));","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './container/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// import Sort from './components/Sort'\r\nimport {store} from './store/createStore'\r\nimport {Provider}  from 'react-redux';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n\r\n    \r\n"],"sourceRoot":""}